# Add any extra import statements you may need here# Add any helper functions you may need heredef rotationalCipher(input, rotation_factor):  # Write your code here    true_alpha_shift = rotation_factor % 26  true_numeric_shift = rotation_factor % 10    #Check if there is a true shift is required   if len(input) == 0 or rotation_factor == 0 or (true_alpha_shift == 0 and true_numeric_shift == 0):      return input    #   encodedString='';  for char in input:      encodedChar=''      if char.isdigit():          #Determine the shiftindex of the digit           value = int(char) + true_numeric_shift           encodedChar = str(value % 10)      elif char.isupper():          ordPos = ord(char)          shiftValue = ordPos + true_alpha_shift          if shiftValue > 90:              encodedChar = chr(65 + (shiftValue % 90) -1)          else:              encodedChar = chr(shiftValue)               elif char.islower():          ordPos = ord(char)          shiftValue = ordPos + true_alpha_shift          if shiftValue > 122:              encodedChar = chr(97 + (shiftValue % 122) -1 )          else:              encodedChar = chr(shiftValue)      else:          #Append the character as is           encodedChar =char      encodedString +=encodedChar  return encodedString# These are the tests we use to determine if the solution is correct.# You can add your own at the bottom.def printString(string):  print('[\"', string, '\"]', sep='', end='')test_case_number = 1def check(expected, output):  global test_case_number  result = False  if expected == output:    result = True  rightTick = '\u2713'  wrongTick = '\u2717'  if result:    print(rightTick, 'Test #', test_case_number, sep='')  else:    print(wrongTick, 'Test #', test_case_number, ': Expected ', sep='', end='')    printString(expected)    print(' Your output: ', end='')    printString(output)    print()  test_case_number += 1if __name__ == "__main__":  input_1 = "All-convoYs-9-be:Alert1."  rotation_factor_1 = 4  expected_1 = "Epp-gsrzsCw-3-fi:Epivx5."  output_1 = rotationalCipher(input_1, rotation_factor_1)  check(expected_1, output_1)  input_2 = "abcdZXYzxy-999.@"  rotation_factor_2 = 200  expected_2 = "stuvRPQrpq-999.@"  output_2 = rotationalCipher(input_2, rotation_factor_2)  check(expected_2, output_2)  # Add your own test cases here  