{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6a9686b8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting python-dotenv\n",
      "  Downloading python_dotenv-0.19.2-py2.py3-none-any.whl (17 kB)\n",
      "Installing collected packages: python-dotenv\n",
      "Successfully installed python-dotenv-0.19.2\n"
     ]
    }
   ],
   "source": [
    "!pip install python-dotenv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c838d5cf",
   "metadata": {},
   "outputs": [],
   "source": [
    "from dotenv import load_dotenv, find_dotenv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "96a238a7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/Users/kiran/Documents/GitHub/python/datascience/titanic/.env\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# find .env automatically \n",
    "dotenv_path = find_dotenv()\n",
    "\n",
    "# load up the entries as environment variables\n",
    "print(dotenv_path)\n",
    "\n",
    "load_dotenv(dotenv_path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "0649f664",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/Users/kiran/Documents/GitHub/python/datascience/titanic/.env\n",
      "bkiranid4u\n"
     ]
    }
   ],
   "source": [
    "# extracting environment variables using os.environment.get\n",
    "\n",
    "import os \n",
    "# find .env automatically \n",
    "dotenv_path = find_dotenv()\n",
    "\n",
    "load_dotenv(dotenv_path)\n",
    "\n",
    "KAGGLE_USERNAME = os.getenv('KAGGLE_USERNAME')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "ec5eb6ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "# imnports \n",
    "import requests\n",
    "\n",
    "from requests import session\n",
    "import os \n",
    "from dotenv import load_dotenv,find_dotenv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "e2b82359",
   "metadata": {},
   "outputs": [],
   "source": [
    "from kaggle.api.kaggle_api_extended import KaggleApi\n",
    "\n",
    "api = KaggleApi()\n",
    "api.authenticate()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "4a2a8af6",
   "metadata": {},
   "outputs": [],
   "source": [
    "api.competition_download_files('titanic', path='../')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "c26813a5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.0-ak-extract-titanic-data  titanic.zip\r\n",
      "Untitled.ipynb\r\n"
     ]
    }
   ],
   "source": [
    "%ls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "71f53ee5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Downloading test.csv to .\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 28.0k/28.0k [00:00<00:00, 7.00MB/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "api.competition_download_file('titanic', 'test.csv', path='./')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "19347149",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Downloading train.csv to .\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 59.8k/59.8k [00:00<00:00, 10.8MB/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "api.competition_download_file('titanic', 'train.csv', path='./')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "ede13d5f",
   "metadata": {},
   "outputs": [],
   "source": [
    "get_raw_data_script_file = os.path.join(os.path.pardir, 'src','data','get_raw_data.py')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "04340283",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "../src/data/get_raw_data.py\n"
     ]
    }
   ],
   "source": [
    "print(get_raw_data_script_file)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "452a4f13",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<Response [200]>\n"
     ]
    },
    {
     "ename": "TypeError",
     "evalue": "write() argument must be str, not bytes",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m/var/folders/17/4rz5trnj77755dwwrs7kt4dw0000gn/T/ipykernel_3390/1926818856.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     28\u001b[0m                 \u001b[0mhandle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwrite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mblock\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     29\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 30\u001b[0;31m \u001b[0mextract_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'https://kaggle.com/c/titanic/download/train.csv'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'./train.csv'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     31\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     32\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/var/folders/17/4rz5trnj77755dwwrs7kt4dw0000gn/T/ipykernel_3390/1926818856.py\u001b[0m in \u001b[0;36mextract_data\u001b[0;34m(url, file_path)\u001b[0m\n\u001b[1;32m     26\u001b[0m             \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresponse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     27\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mblock\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miter_content\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1024\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 28\u001b[0;31m                 \u001b[0mhandle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwrite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mblock\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     29\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     30\u001b[0m \u001b[0mextract_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'https://kaggle.com/c/titanic/download/train.csv'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'./train.csv'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mTypeError\u001b[0m: write() argument must be str, not bytes"
     ]
    }
   ],
   "source": [
    "\n",
    "# **************** Cosing: utf-8 ************\n",
    "\n",
    "import os\n",
    "from dotenv import load_dotenv,find_dotenv\n",
    "import requests\n",
    "from kaggle.api.kaggle_api_extended import KaggleApi\n",
    "import logging\n",
    "\n",
    "# Payload to log into kaggle\n",
    "\n",
    "payload = {\n",
    "    'action': 'login',\n",
    "    'username': os.getenv('KAGGLE_USERNAME'),\n",
    "    'password': os.getenv('KAGGLE_APIKEY')\n",
    "}\n",
    "\n",
    "def extract_data(competition,fileName, filePath):\n",
    "    '''\n",
    "    Method to extract data\n",
    "    '''    \n",
    "    api = KaggleApi()\n",
    "    api.authenticate()\n",
    "    logger.info('Downloading the data - {0}'.format(fileName))\n",
    "    api.competition_download_file(competition,fileName, filePath)\n",
    "    \n",
    "\n",
    "def main(project_dir):\n",
    "    \"\"\"\n",
    "        Main Method\n",
    "    \"\"\"\n",
    "    #Get Logger\n",
    "    \n",
    "    logger = logger.getLogger(__name__)\n",
    "    logger.info('Getting Raw Data')\n",
    "    \n",
    "    # competion,dataset name && file path \n",
    "\n",
    "    raw_data_path = os.path.join(project_dir,'raw','data')\n",
    "    train_data_path = os.path.join(raw_data_path, 'train.csv')\n",
    "    test_data_path = os.path.join(raw_data_path,'test.csv')\n",
    "    \n",
    "    # Extract data\n",
    "    extract_data('titanic','train .csv',train_data_path)\n",
    "    extract_data('titanic','test .csv',test_data_path)\n",
    "    \n",
    "    logger.info('Downloaded the raw data')\n",
    "\n",
    "if __name__ = '__main__':\n",
    "    \n",
    "    # Getting root directory\n",
    "    \n",
    "    project_dir = os.path.join(os.path.dirname(__file__), os.pardir,os.pardir)\n",
    "    \n",
    "    # Setup the logger\n",
    "    \n",
    "    log_fmt = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n",
    "    logging.basicCopnfig(level=logging.INFO, format=log_fmt)\n",
    "\n",
    "        \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d6d077d7",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3b588207",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
