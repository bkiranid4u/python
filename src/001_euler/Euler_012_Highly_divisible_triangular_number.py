""""
Euler 012 -
    Problem: 
    The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

        1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

        Let us list the factors of the first seven triangle numbers:

        1: 1
        3: 1,3
        6: 1,2,3,6
        10: 1,2,5,10
        15: 1,3,5,15
        21: 1,3,7,21
        28: 1,2,4,7,14,28
        We can see that 28 is the first triangle number to have over five divisors.

        What is the value of the first triangle number to have over five hundred divisors?
"""


import itertools


def infinite_sequence():
    num = 1
    while True:
        yield num
        num += 1


def findDivisors(num):

    countOfDivisors = 0
    i = 1

    while i < (num/2 + 1):
        if(num % i == 0):
            +countOfDivisors
        if(countOfDivisors == 500):
            break
        i += 1
    return countOfDivisors


num_gen = infinite_sequence()
total_sum = 0


# while True:
#     total_sum += next(num_gen)
#     totalDivisors = findDivisors(total_sum)
#     if totalDivisors >= 500:
#         print(total_sum)
#         break


def triangle_numbers():
    return itertools.accumulate(itertools.count())


def factors(num):
    for div in range(1, int(num**0.5) + 1):
        if num % div == 0:
            yield div
            other = num // div
            if other != div:
                yield other


def euler_12():
    for number in triangle_numbers():
        if len(list(factors(number))) >= 500:
            return number


print(euler_12())
